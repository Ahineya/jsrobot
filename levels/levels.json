{"Basics":[{"map":{"file":"levels/maps/basics-baby-steps.map","mapcontent":"####################\n#                  #\n#  _            f  #\n#                  #\n####################","width":"20","height":"5"},"group":"Basics","name":"Baby steps","description":"<p><span class='story'>*Mechanical voice*:</span></p>\n<p><span class='story'>&mdash; You are not supposed to be here. Please, proceed to exit.</span></p>\n<p><br></p>\n<p>You can write your code in the dark grey area at bottom.</p>\n<p>You are a robot, that smiling face represents you. \"#\" symbol is a wall. \"_\" is a start. \"f\" is a finish, it's your goal at this level.</p>\n<p></p>\n<p>In this code scope variable R is the robot object.</p><p>In each level you need to figure out what code you need to write to solve the task.</p><p>Write \"<span class='code'>R.right();</span>\" to proceed.</p>","before":"\nintervals.push(\n    setInterval(function() {\n        try {\n","after":"\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },300)\n);\n"},{"map":{"file":"levels/maps/basics-can-you-go-diagonal.map","mapcontent":"#######\n#_    #\n#     #\n#     #\n#     #\n#    f#\n#######","width":"7","height":"7"},"group":"Basics","name":"Can you go diagonal?","description":"<p><span class='story'>*Mechanical voice*:</span></p><p><span class='story'>&mdash; You are not supposed to be here. Please, proceed to exit.</span></p><p><br></p><p>You can use each of robot moving methods: <span class='code'>R.left();</span><span class='code'>R.right();</span><span class='code'>R.up();</span><span class='code'>R.down();</span></p>","before":"\nintervals.push(\n    setInterval(function() {\n        try {\n","after":"\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },500)\n);\n"},{"map":{"file":"levels/maps/basics-variables-training.map","mapcontent":"#######\n#     #\n# _ f #\n#     #\n#######","width":"7","height":"5"},"group":"Basics","name":"Variables training","description":"\n    <p>\n        <span class='story'>*Mechanical voice*:</span>\n    </p>\n    <p>\n        <span class='story'>&mdash; You are not supposed to be here. Please, proceed to exit.</span>\n    </p>\n    <p><br /></p>\n    <p>\n        Robot has a moving method, that accepts string direction parameter:\n        <span class='code'>R.move('left');</span>\n        <span class='code'>R.move('right');</span>\n        <span class='code'>R.move('up');</span>\n        <span class='code'>R.move('down');</span>\n    </p>\n    <p>\n        Read all code carefully and try to understand all executing algorithm.\n        Read an error messages&nbsp;&mdash; sometimes they contains answers.\n    </p>\n","before":"\nintervals.push(\n    setInterval(function() {\n        try {\n","code":"\nvar direction = 'To Dublin';\n","after":"\n            R.move(direction);\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },300)\n);\n"},{"map":{"file":"levels/maps/basics-robot-walking-commands.map","mapcontent":"############\n#      # f #\n#   #  #   #\n# _ #      #\n############","width":"12","height":"5"},"group":"Basics","name":"Robot walking commands","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; You haven't enough rights to be in Snake Chamber. Please, proceed to exit.</span></p>\n","before":"try {\n","after":"\n} catch(e) {\n    error(e, intervals, R)\n};\n"},{"map":{"file":"levels/maps/basics-harder-walking-algorithms.map","mapcontent":"############\n#      # f #\n#   #  #   #\n# _ #      #\n############","width":"12","height":"5"},"group":"Basics","name":"Harder walking algorithms","description":"\n\t<p><span class='story'>*Mechanical voice*:</span></p>\n\t<p><span class='story'>&mdash; You haven't enough rights to be in Snake Chamber. Please, proceed to exit.</span></p>\n\t<p><br></p>\n\t<p>Remember that robot walking functions returns false if robot trying to go to the wall.</p>\n\t<p>I'm giving you a free initialized variable. Enjoy.</p>    \n","before":"var temp = 0;\nintervals.push(\n    setInterval(function() {\n        try {\n","after":"\n        } catch(e) {\n            error(e, intervals, R)\n        }\n    }, 300)\n);\n"},{"map":{"file":"levels/maps/basics-hello-regexp.map","mapcontent":"########\n#_  $f #\n########","width":"8","height":"3"},"group":"Basics","name":"Hello, regexp!","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; You are disobeying our instructions. Wait in this room until guards came.</span></p>\n    <p><br></p>\n    <p>Regexps. Cool thing, eh? \"$\" represents a closed door. You need a key...</p>\n    <p>Technically, the door is the wall, which you can destroy via <span class='code'>R.destroy(direction);</span>\n    Oh, I'm sorry. You can't. I can.</p>\n","before":"var regexp = /[^a-z0-9]/;\nintervals.push(\n    setInterval(function(){\n        try {\n","after":"\n            if(regexp.test(key)) {\n                R.destroy('right');\n            }\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },500)\n);\n"},{"map":{"file":"levels/maps/basics-first-death.map","mapcontent":"########\n#   #f##\n#_   ^E#\n#   #E##\n########","width":"8","height":"5"},"group":"Basics","name":"First death","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; You are still disobeying instructions. Prepare to be desintegrated.</span></p>\n    <p><br></p>\n    <p>Robots have <span class='code'>R.standingOn(char)</span> instruction.\n    It returns true, if robot standing on char symbol.</p>\n","before":"intervals.push(\n    setInterval(function() {\n        try {\n            if (R.standingOn('E')) {\n                R.die();\n            }\n","after":"\n            R.right();\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },500)\n);\n"},{"map":{"file":"levels/maps/basics-another-labyrinth.map","mapcontent":"###############\n#-       123  #\n# #####       #\n#> +  ###EfE###\n### ###E#####E#\n# #>   +     >#\n# ##### #######\n#  -   >      #\n### ######### #\n#- >#       # #\n# # # ##### # #\n# # # #     # #\n# # # ####### #\n#_# #         #\n###############","width":"15","height":"15","mapfunc":"\nvar f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n        for (var j = 0; j<this.options.height; j++) {\n            if(this.base[i][j].symbol === '#') {\n                this.base[i][j].color = 'grey'\n            } else if(/^\\\\d+$/.test(this.base[i][j].symbol)){\n                this.base[i][j].color = 'lime'\n            } else if(this.base[i][j].symbol === 'f'){\n                this.base[i][j].color = '#f0f0f0'\n            }  \n        }\n    }; \n    this.redraw();\n}\n"},"group":"Basics","name":"Another labyrinth","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; Try to escape from labyrinth of doom! Bzzz-zzz.</span></p>\n    <p><br></p>\n    <p>If <span class='code'>R.standingOn(char)</span> called without params, it returns symbol robot stands.\n    And remember that start marked with \"_\" symbol.</p>\n    <p>P.s. you see? I can paint it! :)</p>\n","before":"var temp = 0;\nintervals.push(\n    setInterval(function(){\n    try {\n        if (R.standingOn('E')) {\n            R.die();\n        }\n","after":"\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },500)\n);\n"},{"map":{"file":"levels/maps/basics-more-regexps.map","mapcontent":"#########\n#_  $ f #\n#########","width":"9","height":"3"},"group":"Basics","name":"More regexps","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; You are escaped from labyrinth of doom! But what would you do now?</span></p>\n    <p><br></p>\n    <p>Regexps. I'm loving it!</p>\n","before":"intervals.push(\n    setInterval(function(){\n        try {\n","code":"var key = '';","after":"\n            R.right();\n            var r = /<([a-z]{3})>(.*)<\\/\\1>/;\n            if (r.exec(key)[2] === 'key') {\n                R.destroy('right');\n            }\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },500)\n);\n"},{"map":{"file":"levels/maps/basics-keyword-directions.map","mapcontent":"###################\n#_ v   > v v < > v#\n# # # # # # # # # #\n#  > v   1   ^   2#\n# # # # # # # # # #\n#>     ^ < >   ^  #\n# # # # # # # # # #\n#v 3 <   v   4   <#\n# # # # # # # # # #\n#  v < >     < 5 v#\n# # # # # # # # # #\n#>   ^   >   6 ^  #\n# # # # # # # # # #\n#v <   ^ <   < v <#\n# # # # # # # # # #\n#>     7 ^ <   8  #\n# # # # # # # # # #\n#      >   ^   > f#\n###################","width":"19","height":"19","mapfunc":"\nvar f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n        for (var j = 0; j<this.options.height; j++) {\n            if(this.base[i][j].symbol === '#') {\n                this.base[i][j].color = 'grey'\n            } else if(/^\\\\d+$/.test(this.base[i][j].symbol)){\n                this.base[i][j].color = 'lime'\n            } else if(this.base[i][j].symbol === 'f'){\n                this.base[i][j].color = '#f0f0f0'\n            }  \n        }\n    }; \n    this.redraw();\n}\n"},"group":"Basics","name":"Keyword: directions","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; You will be straying in this hallways forever.</span></p>\n    <p><br></p>\n    <p>Pay attention on what symbol are you staying.</p>\n","before":"var direction = 'right';\nintervals.push(\n    setInterval(function(){\n        try {\n","after":"\n            var directions = {\n                'v': 'down',\n                '>': 'right',\n                '^': 'up',\n                '<': 'left'\n            }\n            if( (!R.standingOn(' ')) && (!R.standingOn('f'))) {\n                if (typeof(directions[R.standingOn()])!=='undefined') {\n                    direction = directions[R.standingOn()];\n                }\n            }\n            R.move(direction);\n\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },200)\n);\n"},{"map":{"file":"levels/maps/basics-conditional-demolition.map","mapcontent":"###########\n#_ 1$ 2$f #\n###########","width":"11","height":"3","mapfunc":"\nvar f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n        for (var j = 0; j<this.options.height; j++) {\n            if(this.base[i][j].symbol === '#') {\n                this.base[i][j].color = 'grey';\n            } else if (/^\\\\d+$/.test(this.base[i][j].symbol)) {\n                this.base[i][j].color = 'lime';\n            } else if(this.base[i][j].symbol === 'f') {\n                this.base[i][j].color = '#f0f0f0';\n            }\n        }\n    };\n    this.redraw();\n}\n"},"group":"Basics","name":"Conditional demolition","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; Some closed doors would stop you. For centuries.</span></p>\n    <p><br></p>\n    <p></p>\n","runnerfunc":"\n(function(code) {\n    if(/steps|counter/.test(code)) {\n        throw new Error('Robot: that would be very easy... You can do it without using steps or counter variables. By the way, do you know, that R is an object, and objects can have properties?.');\n    }\n})(code);\n","before":"\nvar counter = 0;\nvar steps=0;\nintervals.push(\n    setInterval(function() {\n        try {\n","code":"\n\n","after":"\n\n            steps++;\n            if(R.standingOn('1')){\n                counter++;\n            }\n            if( (steps === 4) &&\n                (R.standingOn('1')) &&\n                (counter<=2) )\n                {\n                    R.destroy('right');\n                }\n            if((R.standingOn('2')) &&\n                (/^<(.{1})>\\\\1<(.{1})>\\\\2<(.{1})>\\\\3$/).test(key))\n                {\n                    R.destroy('right');\n                }\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },200)\n);\n"}],"Advanced":[{"map":{"file":"levels/maps/advanced-object-work.map","mapcontent":"#######\n#_ $f #\n#######","width":"7","height":"3","mapfunc":"\n    var f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n    for (var j = 0; j<this.options.height; j++) {\n    if(this.base[i][j].symbol === '#') {\n    this.base[i][j].color = 'grey';\n    } else if (/^\\\\d+$/.test(this.base[i][j].symbol)) {\n    this.base[i][j].color = 'lime';\n    } else if(this.base[i][j].symbol === 'f') {\n    this.base[i][j].color = '#f0f0f0';\n    }\n    }\n    };\n    this.redraw();\n    }\n"},"group":"Advanced","name":"Object work","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; Can you take a key from guinea pig's stomach?</span></p>\n    <p><br></p>\n    <p>You want to tell me that you have beaten all basics levels? Ok, try this one.</p>\n","before":"\n\nvar guineaPig = (function() {\n    var key = false;\n    return {\n        getKeyFromStomach: function() {return key;}\n    }\n})();\n\nintervals.push(\n    setInterval(function() {\n        try {\n","code":"\n\n","after":"\n            if (guineaPig.getKeyFromStomach()) {\n                R.destroy('right');\n            }\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },200)\n);\n"},{"map":{"file":"levels/maps/advanced-more-object-work.map","mapcontent":"#######\n#_ $f #\n#######","width":"7","height":"3","mapfunc":"\n    var f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n    for (var j = 0; j<this.options.height; j++) {\n    if(this.base[i][j].symbol === '#') {\n    this.base[i][j].color = 'grey';\n    } else if (/^\\\\d+$/.test(this.base[i][j].symbol)) {\n    this.base[i][j].color = 'lime';\n    } else if(this.base[i][j].symbol === 'f') {\n    this.base[i][j].color = '#f0f0f0';\n    }\n    }\n    };\n    this.redraw();\n    }\n"},"group":"Advanced","name":"More object work","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; Ok, you did it. But can you take a key from guinea pig's stomach without\n        touching pig with your manipulators?</span></p>\n    <p><br></p>\n    <p>Yeah. This level is a same. But you can't use guineaPig variable. No. No way.</p>\n","runnerfunc":"\n    (function(code) {\n    if(/g.*u.*i.*n.*e.*a.*P.*i.*g/gm.test(code)) {\n    throw new Error(\"Hey. This is an Advanced levels section, did you notice that? You can't touch guineaPig.\");\n    }\n    })(code);\n","before":"\n\nvar guineaPig = (function() {\n    var key = false;\n    return {\n        getKeyFromStomach: function() {return key;}\n    }\n})();\n\nintervals.push(\n    setInterval(function() {\n        try {\n","code":"\n\n","after":"\n        if (guineaPig.getKeyFromStomach()) {\n            R.destroy('right');\n        }\n    } catch(e) {\n        error(e, intervals, R);\n    }\n    },200)\n    );\n"},{"map":{"file":"levels/maps/advanced-functions.map","mapcontent":"#######\n#_ $f #\n#######","width":"7","height":"3","mapfunc":"\n    var f = function() {\n    for(var i = 0; i<this.options.width; i++) {\n    for (var j = 0; j<this.options.height; j++) {\n    if(this.base[i][j].symbol === '#') {\n    this.base[i][j].color = 'grey';\n    } else if (/^\\\\d+$/.test(this.base[i][j].symbol)) {\n    this.base[i][j].color = 'lime';\n    } else if(this.base[i][j].symbol === 'f') {\n    this.base[i][j].color = '#f0f0f0';\n    }\n    }\n    };\n    this.redraw();\n    }\n"},"group":"Advanced","name":"Functions","description":"\n    <p><span class='story'>*Mechanical voice*:</span></p>\n    <p><span class='story'>&mdash; Use the force!</span></p>\n    <p><br></p>\n    <p>Functions. Mmh, delicious.</p>\n","before":"\nintervals.push(\n    setInterval(function() {\n        try {\n","code":"\n","after":"\n            if (key('joker') && !key('joker')) {\n                R.destroy('right');\n            }\n        } catch(e) {\n            error(e, intervals, R);\n        }\n    },200)\n);\n"}]}